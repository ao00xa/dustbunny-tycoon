%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 315 575 476
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Sunday, July 11, 2010 4:06:10 o'clock PM PDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
550 159 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
550.000 0 l
550.000 159.000 l
0 159.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 540 149 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
1.00000 0 0 RG
64.0000 6.02761 473.996 106.972 rc
newpath
65.0000 112.000 m
75.2663 106.069 l
84.1991 103.015 l
94.2448 100.097 l
104.357 97.4286 l
114.421 94.9289 l
123.752 92.7036 l
133.414 90.4660 l
143.406 88.2054 l
153.366 85.9935 l
163.611 83.7525 l
172.635 81.8018 l
182.793 79.6270 l
192.994 77.4624 l
202.824 75.3915 l
211.750 73.5220 l
222.365 71.3107 l
231.357 69.4461 l
241.817 67.2859 l
251.076 65.3806 l
261.234 63.2968 l
270.907 61.3182 l
281.000 59.2589 l
290.268 57.3721 l
300.265 55.3410 l
310.649 53.2352 l
319.689 51.4051 l
329.452 49.4314 l
339.538 47.3951 l
349.405 45.4055 l
358.952 43.4826 l
379.078 39.4350 l
398.463 35.5427 l
427.927 29.6365 l
535.996 8.02761 l
S
cliprestore
newpath
0 0 m
0 149.000 l
540.000 149.000 l
540.000 0 l
h
W
Q
Q
q
2 J
0 j
q
newpath
476.974 115.000 m
476.974 117.100 l
S
newpath
358.930 115.000 m
358.930 117.100 l
S
newpath
240.885 115.000 m
240.885 117.100 l
S
newpath
122.841 115.000 m
122.841 117.100 l
S
newpath
62.0000 115.000 m
535.996 115.000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
287 133 27 15 rc
newpath
292.968 145.203 m
293.687 138.031 l
293.718 137.666 293.734 137.421 293.734 137.296  c
293.734 137.109 293.664 136.950 293.523 136.820  c
293.382 136.690 293.161 136.625 292.859 136.625  c
292.625 136.625 l
292.687 136.390 l
296.078 136.390 l
296.015 136.625 l
295.651 136.635 295.398 136.674 295.257 136.742  c
295.117 136.809 295.005 136.932 294.921 137.109  c
294.880 137.203 294.838 137.468 294.796 137.906  c
294.281 143.031 l
297.640 138.453 l
298.005 137.963 298.234 137.619 298.328 137.421  c
298.390 137.286 298.421 137.171 298.421 137.078  c
298.421 136.963 298.375 136.864 298.281 136.781  c
298.187 136.697 298.005 136.645 297.734 136.625  c
297.812 136.390 l
300.406 136.390 l
300.343 136.625 l
300.135 136.645 299.968 136.687 299.843 136.750  c
299.614 136.854 299.382 137.018 299.148 137.242  c
298.914 137.466 298.546 137.921 298.046 138.609  c
293.203 145.203 l
292.968 145.203 l
h
301.847 136.734 m
302.024 136.734 302.175 136.796 302.300 136.921  c
302.425 137.046 302.487 137.197 302.487 137.375  c
302.487 137.541 302.425 137.687 302.300 137.812  c
302.175 137.937 302.024 138.000 301.847 138.000  c
301.670 138.000 301.519 137.937 301.394 137.812  c
301.269 137.687 301.206 137.541 301.206 137.375  c
301.206 137.197 301.269 137.046 301.394 136.921  c
301.519 136.796 301.670 136.734 301.847 136.734  c
h
301.925 139.250 m
300.675 143.703 l
300.592 144.005 300.550 144.187 300.550 144.250  c
300.550 144.312 300.571 144.364 300.612 144.406  c
300.654 144.447 300.701 144.468 300.753 144.468  c
300.815 144.468 300.888 144.437 300.972 144.375  c
301.222 144.177 301.467 143.906 301.706 143.562  c
301.925 143.703 l
301.644 144.140 301.305 144.510 300.909 144.812  c
300.628 145.041 300.357 145.156 300.097 145.156  c
299.920 145.156 299.776 145.104 299.667 145.000  c
299.558 144.895 299.503 144.765 299.503 144.609  c
299.503 144.453 299.555 144.192 299.659 143.828  c
300.487 140.984 l
300.623 140.515 300.690 140.224 300.690 140.109  c
300.690 140.015 300.657 139.937 300.589 139.875  c
300.521 139.812 300.430 139.781 300.315 139.781  c
300.222 139.781 300.029 139.807 299.737 139.859  c
299.737 139.609 l
301.925 139.250 l
h
305.427 139.250 m
304.584 142.140 l
305.375 140.963 305.979 140.187 306.396 139.812  c
306.813 139.437 307.219 139.250 307.615 139.250  c
307.823 139.250 307.998 139.320 308.138 139.460  c
308.279 139.601 308.349 139.786 308.349 140.015  c
308.349 140.265 308.287 140.604 308.162 141.031  c
307.380 143.703 l
307.297 144.005 307.255 144.192 307.255 144.265  c
307.255 144.328 307.271 144.377 307.302 144.414  c
307.334 144.450 307.370 144.468 307.412 144.468  c
307.464 144.468 307.526 144.442 307.599 144.390  c
307.818 144.213 308.063 143.942 308.334 143.578  c
308.521 143.703 l
308.136 144.265 307.766 144.666 307.412 144.906  c
307.162 145.072 306.943 145.156 306.755 145.156  c
306.599 145.156 306.474 145.106 306.380 145.007  c
306.287 144.908 306.240 144.781 306.240 144.625  c
306.240 144.427 306.307 144.078 306.443 143.578  c
307.193 141.031 l
307.287 140.708 307.334 140.458 307.334 140.281  c
307.334 140.197 307.305 140.130 307.248 140.078  c
307.190 140.026 307.120 140.000 307.037 140.000  c
306.922 140.000 306.781 140.052 306.615 140.156  c
306.302 140.343 305.977 140.656 305.638 141.093  c
305.300 141.531 304.943 142.088 304.568 142.765  c
304.370 143.130 304.203 143.526 304.068 143.953  c
303.755 145.000 l
302.802 145.000 l
303.959 141.031 l
304.094 140.552 304.162 140.260 304.162 140.156  c
304.162 140.062 304.125 139.981 304.052 139.914  c
303.979 139.846 303.886 139.812 303.771 139.812  c
303.719 139.812 303.630 139.822 303.505 139.843  c
303.271 139.875 l
303.224 139.656 l
305.427 139.250 l
h
f
Q
cliprestore
newpath
0 0 m
0 149.000 l
540.000 149.000 l
540.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
181.863 115.000 m
181.863 119.745 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
184.531 131.234 m
186.625 130.218 l
186.828 130.218 l
186.828 137.484 l
186.828 137.963 186.849 138.263 186.890 138.382  c
186.932 138.502 187.015 138.593 187.140 138.656  c
187.265 138.718 187.520 138.755 187.906 138.765  c
187.906 139.000 l
184.671 139.000 l
184.671 138.765 l
185.078 138.755 185.341 138.718 185.460 138.656  c
185.580 138.593 185.664 138.510 185.710 138.406  c
185.757 138.302 185.781 137.994 185.781 137.484  c
185.781 132.843 l
185.781 132.208 185.760 131.802 185.718 131.625  c
185.687 131.489 185.632 131.390 185.554 131.328  c
185.476 131.265 185.380 131.234 185.265 131.234  c
185.109 131.234 184.895 131.302 184.625 131.437  c
184.531 131.234 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
299.907 115.000 m
299.907 119.745 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
306.953 137.343 m
306.359 139.000 l
301.281 139.000 l
301.281 138.765 l
302.770 137.401 303.820 136.286 304.429 135.421  c
305.039 134.557 305.343 133.770 305.343 133.062  c
305.343 132.510 305.177 132.059 304.843 131.710  c
304.510 131.362 304.109 131.187 303.640 131.187  c
303.224 131.187 302.846 131.309 302.507 131.554  c
302.169 131.799 301.921 132.161 301.765 132.640  c
301.531 132.640 l
301.635 131.859 301.906 131.260 302.343 130.843  c
302.781 130.427 303.328 130.218 303.984 130.218  c
304.682 130.218 305.265 130.442 305.734 130.890  c
306.203 131.338 306.437 131.864 306.437 132.468  c
306.437 132.906 306.333 133.343 306.125 133.781  c
305.812 134.468 305.307 135.192 304.609 135.953  c
303.557 137.109 302.895 137.807 302.625 138.046  c
304.875 138.046 l
305.333 138.046 305.653 138.028 305.835 137.992  c
306.018 137.955 306.184 137.885 306.335 137.781  c
306.487 137.677 306.614 137.531 306.718 137.343  c
306.953 137.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
417.952 115.000 m
417.952 119.745 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
419.656 132.031 m
419.906 131.447 420.218 131.000 420.593 130.687  c
420.968 130.375 421.432 130.218 421.984 130.218  c
422.682 130.218 423.213 130.442 423.578 130.890  c
423.859 131.224 424.000 131.578 424.000 131.953  c
424.000 132.588 423.604 133.239 422.812 133.906  c
423.343 134.114 423.744 134.411 424.015 134.796  c
424.286 135.182 424.421 135.635 424.421 136.156  c
424.421 136.895 424.182 137.536 423.703 138.078  c
423.088 138.796 422.197 139.156 421.031 139.156  c
420.447 139.156 420.052 139.083 419.843 138.937  c
419.635 138.791 419.531 138.635 419.531 138.468  c
419.531 138.343 419.580 138.237 419.679 138.148  c
419.778 138.059 419.895 138.015 420.031 138.015  c
420.135 138.015 420.244 138.031 420.359 138.062  c
420.432 138.083 420.596 138.158 420.851 138.289  c
421.106 138.419 421.281 138.500 421.375 138.531  c
421.531 138.572 421.697 138.593 421.875 138.593  c
422.302 138.593 422.677 138.427 423.000 138.093  c
423.322 137.760 423.484 137.364 423.484 136.906  c
423.484 136.572 423.411 136.250 423.265 135.937  c
423.151 135.697 423.026 135.515 422.890 135.390  c
422.713 135.224 422.466 135.072 422.148 134.937  c
421.830 134.802 421.505 134.734 421.171 134.734  c
420.968 134.734 l
420.968 134.531 l
421.302 134.489 421.638 134.369 421.976 134.171  c
422.315 133.974 422.559 133.737 422.710 133.460  c
422.862 133.184 422.937 132.875 422.937 132.531  c
422.937 132.104 422.802 131.755 422.531 131.484  c
422.260 131.213 421.921 131.078 421.515 131.078  c
420.859 131.078 420.312 131.427 419.875 132.125  c
419.656 132.031 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
535.996 115.000 m
535.996 119.745 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
543.046 135.828 m
543.046 136.734 l
541.890 136.734 l
541.890 139.000 l
540.843 139.000 l
540.843 136.734 l
537.203 136.734 l
537.203 135.921 l
541.203 130.218 l
541.890 130.218 l
541.890 135.828 l
543.046 135.828 l
h
540.843 135.828 m
540.843 131.546 l
537.828 135.828 l
540.843 135.828 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
62.0000 19.2386 m
59.9000 19.2386 l
S
newpath
62.0000 41.6607 m
59.9000 41.6607 l
S
newpath
62.0000 64.0827 m
59.9000 64.0827 l
S
newpath
62.0000 86.5048 m
59.9000 86.5048 l
S
newpath
62.0000 108.926 m
59.9000 108.926 l
S
newpath
62.0000 115.000 m
62.0000 8.02761 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 45 38 30 rc
newpath
4.21875 57.0000 m
4.21875 56.7656 l
4.54687 56.7656 l
4.91145 56.7656 5.17187 56.6510 5.32812 56.4218  c
5.41145 56.2760 5.45312 55.9583 5.45312 55.4687  c
5.45312 49.9218 l
5.45312 49.3802 5.39583 49.0416 5.28125 48.9062  c
5.11458 48.7187 4.86979 48.6250 4.54687 48.6250  c
4.21875 48.6250 l
4.21875 48.3906 l
7.71875 48.3906 l
9.01041 48.3906 9.99218 48.5364 10.6640 48.8281  c
11.3359 49.1197 11.8750 49.6067 12.2812 50.2890  c
12.6875 50.9713 12.8906 51.7604 12.8906 52.6562  c
12.8906 53.8541 12.5260 54.8541 11.7968 55.6562  c
10.9843 56.5520 9.73958 57.0000 8.06250 57.0000  c
4.21875 57.0000 l
h
6.67187 56.3750 m
7.21354 56.5000 7.66666 56.5625 8.03125 56.5625  c
9.01041 56.5625 9.82552 56.2161 10.4765 55.5234  c
11.1276 54.8307 11.4531 53.8958 11.4531 52.7187  c
11.4531 51.5312 11.1276 50.5937 10.4765 49.9062  c
9.82552 49.2187 8.99479 48.8750 7.98437 48.8750  c
7.59895 48.8750 7.16145 48.9375 6.67187 49.0625  c
6.67187 56.3750 l
h
18.8881 51.1875 m
18.8881 54.7031 l
18.8881 55.3802 18.9038 55.7942 18.9350 55.9453  c
18.9663 56.0963 19.0183 56.2005 19.0913 56.2578  c
19.1642 56.3151 19.2475 56.3437 19.3413 56.3437  c
19.4663 56.3437 19.6121 56.3072 19.7788 56.2343  c
19.8725 56.4531 l
18.1225 57.1718 l
17.8413 57.1718 l
17.8413 55.9531 l
17.3413 56.4947 16.9611 56.8333 16.7006 56.9687  c
16.4402 57.1041 16.1642 57.1718 15.8725 57.1718  c
15.5496 57.1718 15.2683 57.0781 15.0288 56.8906  c
14.7892 56.7031 14.6225 56.4609 14.5288 56.1640  c
14.4350 55.8671 14.3881 55.4479 14.3881 54.9062  c
14.3881 52.3125 l
14.3881 52.0416 14.3569 51.8515 14.2944 51.7421  c
14.2319 51.6328 14.1433 51.5494 14.0288 51.4921  c
13.9142 51.4349 13.7058 51.4114 13.4038 51.4218  c
13.4038 51.1875 l
15.4350 51.1875 l
15.4350 55.0781 l
15.4350 55.6197 15.5288 55.9739 15.7163 56.1406  c
15.9038 56.3072 16.1329 56.3906 16.4038 56.3906  c
16.5808 56.3906 16.7866 56.3333 17.0210 56.2187  c
17.2553 56.1041 17.5288 55.8906 17.8413 55.5781  c
17.8413 52.2812 l
17.8413 51.9479 17.7814 51.7239 17.6616 51.6093  c
17.5418 51.4947 17.2892 51.4322 16.9038 51.4218  c
16.9038 51.1875 l
18.8881 51.1875 l
h
21.9819 49.2812 m
21.9819 51.1875 l
23.3413 51.1875 l
23.3413 51.6250 l
21.9819 51.6250 l
21.9819 55.4062 l
21.9819 55.7812 22.0366 56.0338 22.1460 56.1640  c
22.2553 56.2942 22.3933 56.3593 22.5600 56.3593  c
22.6954 56.3593 22.8308 56.3151 22.9663 56.2265  c
23.1017 56.1380 23.2058 56.0104 23.2788 55.8437  c
23.5131 55.8437 l
23.3673 56.2604 23.1590 56.5729 22.8881 56.7812  c
22.6173 56.9895 22.3413 57.0937 22.0600 57.0937  c
21.8621 57.0937 21.6694 57.0390 21.4819 56.9296  c
21.2944 56.8203 21.1564 56.6666 21.0678 56.4687  c
20.9793 56.2708 20.9350 55.9635 20.9350 55.5468  c
20.9350 51.6250 l
20.0131 51.6250 l
20.0131 51.4218 l
20.2423 51.3281 20.4793 51.1692 20.7241 50.9453  c
20.9689 50.7213 21.1850 50.4583 21.3725 50.1562  c
21.4767 50.0000 21.6121 49.7083 21.7788 49.2812  c
21.9819 49.2812 l
h
23.5781 51.1875 m
26.2812 51.1875 l
26.2812 51.4218 l
26.1562 51.4218 l
25.9687 51.4218 25.8255 51.4635 25.7265 51.5468  c
25.6276 51.6302 25.5781 51.7343 25.5781 51.8593  c
25.5781 52.0156 25.6510 52.2395 25.7968 52.5312  c
27.2031 55.4687 l
28.5156 52.2656 l
28.5781 52.0885 28.6093 51.9166 28.6093 51.7500  c
28.6093 51.6666 28.5989 51.6093 28.5781 51.5781  c
28.5364 51.5260 28.4817 51.4869 28.4140 51.4609  c
28.3463 51.4349 28.2187 51.4218 28.0312 51.4218  c
28.0312 51.1875 l
29.9218 51.1875 l
29.9218 51.4218 l
29.7656 51.4427 29.6458 51.4765 29.5625 51.5234  c
29.4791 51.5703 29.3854 51.6666 29.2812 51.8125  c
29.2395 51.8645 29.1666 52.0260 29.0625 52.2968  c
26.7031 58.0937 l
26.4739 58.6562 26.1744 59.0833 25.8046 59.3750  c
25.4349 59.6666 25.0781 59.8125 24.7343 59.8125  c
24.4843 59.8125 24.2786 59.7395 24.1171 59.5937  c
23.9557 59.4479 23.8750 59.2812 23.8750 59.0937  c
23.8750 58.9166 23.9322 58.7734 24.0468 58.6640  c
24.1614 58.5546 24.3229 58.5000 24.5312 58.5000  c
24.6666 58.5000 24.8541 58.5468 25.0937 58.6406  c
25.2708 58.7031 25.3802 58.7343 25.4218 58.7343  c
25.5468 58.7343 25.6849 58.6692 25.8359 58.5390  c
25.9869 58.4088 26.1354 58.1562 26.2812 57.7812  c
26.7031 56.7656 l
24.6093 52.3906 l
24.5468 52.2552 24.4479 52.0885 24.3125 51.8906  c
24.1979 51.7447 24.1093 51.6458 24.0468 51.5937  c
23.9531 51.5312 23.7968 51.4739 23.5781 51.4218  c
23.5781 51.1875 l
h
f
newpath
11.8281 63.2031 m
12.0312 66.1250 l
11.8281 66.1250 l
11.5677 65.2500 11.1927 64.6197 10.7031 64.2343  c
10.2135 63.8489 9.63020 63.6562 8.95312 63.6562  c
8.38020 63.6562 7.86197 63.7994 7.39843 64.0859  c
6.93489 64.3724 6.57291 64.8333 6.31250 65.4687  c
6.05208 66.1041 5.92187 66.8958 5.92187 67.8437  c
5.92187 68.6250 6.04687 69.2994 6.29687 69.8671  c
6.54687 70.4349 6.92187 70.8724 7.42187 71.1796  c
7.92187 71.4869 8.49479 71.6406 9.14062 71.6406  c
9.69270 71.6406 10.1822 71.5208 10.6093 71.2812  c
11.0364 71.0416 11.5104 70.5677 12.0312 69.8593  c
12.2187 69.9843 l
11.7916 70.7447 11.2890 71.3046 10.7109 71.6640  c
10.1328 72.0234 9.44791 72.2031 8.65625 72.2031  c
7.22916 72.2031 6.12500 71.6718 5.34375 70.6093  c
4.76041 69.8177 4.46875 68.8906 4.46875 67.8281  c
4.46875 66.9739 4.66145 66.1849 5.04687 65.4609  c
5.43229 64.7369 5.96354 64.1796 6.64062 63.7890  c
7.31770 63.3984 8.05208 63.2031 8.84375 63.2031  c
9.46875 63.2031 10.0833 63.3541 10.6875 63.6562  c
10.8645 63.7500 10.9947 63.7968 11.0781 63.7968  c
11.1927 63.7968 11.2916 63.7552 11.3750 63.6718  c
11.4791 63.5572 11.5572 63.4010 11.6093 63.2031  c
11.8281 63.2031 l
h
12.7490 66.1875 m
15.4521 66.1875 l
15.4521 66.4218 l
15.3271 66.4218 l
15.1396 66.4218 14.9964 66.4635 14.8974 66.5468  c
14.7985 66.6302 14.7490 66.7343 14.7490 66.8593  c
14.7490 67.0156 14.8219 67.2395 14.9677 67.5312  c
16.3740 70.4687 l
17.6865 67.2656 l
17.7490 67.0885 17.7802 66.9166 17.7802 66.7500  c
17.7802 66.6666 17.7698 66.6093 17.7490 66.5781  c
17.7073 66.5260 17.6526 66.4869 17.5849 66.4609  c
17.5172 66.4349 17.3896 66.4218 17.2021 66.4218  c
17.2021 66.1875 l
19.0927 66.1875 l
19.0927 66.4218 l
18.9365 66.4427 18.8167 66.4765 18.7334 66.5234  c
18.6500 66.5703 18.5563 66.6666 18.4521 66.8125  c
18.4104 66.8645 18.3375 67.0260 18.2334 67.2968  c
15.8740 73.0937 l
15.6448 73.6562 15.3453 74.0833 14.9755 74.3750  c
14.6057 74.6666 14.2490 74.8125 13.9052 74.8125  c
13.6552 74.8125 13.4495 74.7395 13.2880 74.5937  c
13.1266 74.4479 13.0459 74.2812 13.0459 74.0937  c
13.0459 73.9166 13.1031 73.7734 13.2177 73.6640  c
13.3323 73.5546 13.4938 73.5000 13.7021 73.5000  c
13.8375 73.5000 14.0250 73.5468 14.2646 73.6406  c
14.4417 73.7031 14.5511 73.7343 14.5927 73.7343  c
14.7177 73.7343 14.8557 73.6692 15.0068 73.5390  c
15.1578 73.4088 15.3063 73.1562 15.4521 72.7812  c
15.8740 71.7656 l
13.7802 67.3906 l
13.7177 67.2552 13.6188 67.0885 13.4834 66.8906  c
13.3688 66.7447 13.2802 66.6458 13.2177 66.5937  c
13.1240 66.5312 12.9677 66.4739 12.7490 66.4218  c
12.7490 66.1875 l
h
24.5146 69.7968 m
24.3584 70.5572 24.0511 71.1432 23.5927 71.5546  c
23.1344 71.9661 22.6292 72.1718 22.0771 72.1718  c
21.4209 72.1718 20.8453 71.8958 20.3505 71.3437  c
19.8557 70.7916 19.6084 70.0416 19.6084 69.0937  c
19.6084 68.1875 19.8818 67.4479 20.4287 66.8750  c
20.9755 66.3020 21.6292 66.0156 22.3896 66.0156  c
22.9625 66.0156 23.4339 66.1666 23.8037 66.4687  c
24.1735 66.7708 24.3584 67.0833 24.3584 67.4062  c
24.3584 67.5729 24.3063 67.7057 24.2021 67.8046  c
24.0979 67.9036 23.9521 67.9531 23.7646 67.9531  c
23.5146 67.9531 23.3271 67.8697 23.2021 67.7031  c
23.1292 67.6197 23.0797 67.4531 23.0537 67.2031  c
23.0276 66.9531 22.9417 66.7604 22.7959 66.6250  c
22.6500 66.5000 22.4469 66.4375 22.1865 66.4375  c
21.7594 66.4375 21.4156 66.5937 21.1552 66.9062  c
20.8115 67.3229 20.6396 67.8697 20.6396 68.5468  c
20.6396 69.2447 20.8115 69.8593 21.1552 70.3906  c
21.4990 70.9218 21.9573 71.1875 22.5302 71.1875  c
22.9469 71.1875 23.3219 71.0468 23.6552 70.7656  c
23.8844 70.5677 24.1084 70.2135 24.3271 69.7031  c
24.5146 69.7968 l
h
27.3471 62.9687 m
27.3471 70.6875 l
27.3471 71.0520 27.3732 71.2942 27.4252 71.4140  c
27.4773 71.5338 27.5581 71.6224 27.6674 71.6796  c
27.7768 71.7369 27.9825 71.7656 28.2846 71.7656  c
28.2846 72.0000 l
25.4409 72.0000 l
25.4409 71.7656 l
25.7013 71.7656 25.8810 71.7395 25.9799 71.6875  c
26.0789 71.6354 26.1570 71.5442 26.2143 71.4140  c
26.2716 71.2838 26.3002 71.0416 26.3002 70.6875  c
26.3002 65.4062 l
26.3002 64.7500 26.2846 64.3463 26.2534 64.1953  c
26.2221 64.0442 26.1726 63.9427 26.1049 63.8906  c
26.0372 63.8385 25.9565 63.8125 25.8627 63.8125  c
25.7482 63.8125 25.6075 63.8437 25.4409 63.9062  c
25.3315 63.6875 l
27.0659 62.9687 l
27.3471 62.9687 l
h
29.9433 68.3750 m
29.9329 69.2395 30.1412 69.9166 30.5683 70.4062  c
30.9850 70.8958 31.4798 71.1406 32.0527 71.1406  c
32.4381 71.1406 32.7714 71.0364 33.0527 70.8281  c
33.3339 70.6197 33.5683 70.2604 33.7558 69.7500  c
33.9589 69.8750 l
33.8652 70.4583 33.6048 70.9869 33.1777 71.4609  c
32.7506 71.9349 32.2141 72.1718 31.5683 72.1718  c
30.8704 72.1718 30.2740 71.9010 29.7793 71.3593  c
29.2845 70.8177 29.0371 70.0885 29.0371 69.1718  c
29.0371 68.1718 29.2923 67.3932 29.8027 66.8359  c
30.3131 66.2786 30.9537 66.0000 31.7246 66.0000  c
32.3704 66.0000 32.9043 66.2161 33.3261 66.6484  c
33.7480 67.0807 33.9589 67.6562 33.9589 68.3750  c
29.9433 68.3750 l
h
29.9433 68.0000 m
32.6308 68.0000 l
32.6100 67.6354 32.5631 67.3750 32.4902 67.2187  c
32.3860 66.9791 32.2298 66.7916 32.0214 66.6562  c
31.8131 66.5208 31.5944 66.4531 31.3652 66.4531  c
31.0110 66.4531 30.6959 66.5911 30.4199 66.8671  c
30.1438 67.1432 29.9850 67.5208 29.9433 68.0000  c
h
f
Q
cliprestore
newpath
0 0 m
0 149.000 l
540.000 149.000 l
540.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
62.0000 97.7158 m
57.2550 97.7158 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
44.4687 102.750 m
44.4687 101.770 44.6171 100.924 44.9140 100.210  c
45.2109 99.4974 45.6041 98.9687 46.0937 98.6250  c
46.4791 98.3541 46.8750 98.2187 47.2812 98.2187  c
47.9375 98.2187 48.5260 98.5520 49.0468 99.2187  c
49.7031 100.052 50.0312 101.182 50.0312 102.609  c
50.0312 103.609 49.8880 104.458 49.6015 105.156  c
49.3151 105.854 48.9479 106.362 48.5000 106.679  c
48.0520 106.997 47.6250 107.156 47.2187 107.156  c
46.3958 107.156 45.7083 106.671 45.1562 105.703  c
44.6979 104.880 44.4687 103.895 44.4687 102.750  c
h
45.7187 102.906 m
45.7187 104.093 45.8645 105.062 46.1562 105.812  c
46.3958 106.437 46.7552 106.750 47.2343 106.750  c
47.4635 106.750 47.7005 106.648 47.9453 106.445  c
48.1901 106.242 48.3750 105.895 48.5000 105.406  c
48.6979 104.687 48.7968 103.661 48.7968 102.328  c
48.7968 101.349 48.6927 100.531 48.4843 99.8750  c
48.3385 99.3854 48.1406 99.0416 47.8906 98.8437  c
47.7239 98.7083 47.5156 98.6406 47.2656 98.6406  c
46.9843 98.6406 46.7291 98.7656 46.5000 99.0156  c
46.1979 99.3697 45.9921 99.9244 45.8828 100.679  c
45.7734 101.434 45.7187 102.177 45.7187 102.906  c
h
52.1250 105.765 m
52.3229 105.765 52.4895 105.835 52.6250 105.976  c
52.7604 106.117 52.8281 106.281 52.8281 106.468  c
52.8281 106.666 52.7604 106.833 52.6250 106.968  c
52.4895 107.104 52.3229 107.171 52.1250 107.171  c
51.9270 107.171 51.7604 107.104 51.6250 106.968  c
51.4895 106.833 51.4218 106.666 51.4218 106.468  c
51.4218 106.270 51.4895 106.104 51.6250 105.968  c
51.7604 105.833 51.9270 105.765 52.1250 105.765  c
h
55.2812 99.2343 m
57.3750 98.2187 l
57.5781 98.2187 l
57.5781 105.484 l
57.5781 105.963 57.5989 106.263 57.6406 106.382  c
57.6822 106.502 57.7656 106.593 57.8906 106.656  c
58.0156 106.718 58.2708 106.755 58.6562 106.765  c
58.6562 107.000 l
55.4218 107.000 l
55.4218 106.765 l
55.8281 106.755 56.0911 106.718 56.2109 106.656  c
56.3307 106.593 56.4140 106.510 56.4609 106.406  c
56.5078 106.302 56.5312 105.994 56.5312 105.484  c
56.5312 100.843 l
56.5312 100.208 56.5104 99.8020 56.4687 99.6250  c
56.4375 99.4895 56.3828 99.3906 56.3046 99.3281  c
56.2265 99.2656 56.1302 99.2343 56.0156 99.2343  c
55.8593 99.2343 55.6458 99.3020 55.3750 99.4375  c
55.2812 99.2343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
62.0000 75.2938 m
57.2550 75.2938 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
44.4687 80.7500 m
44.4687 79.7708 44.6171 78.9244 44.9140 78.2109  c
45.2109 77.4974 45.6041 76.9687 46.0937 76.6250  c
46.4791 76.3541 46.8750 76.2187 47.2812 76.2187  c
47.9375 76.2187 48.5260 76.5520 49.0468 77.2187  c
49.7031 78.0520 50.0312 79.1822 50.0312 80.6093  c
50.0312 81.6093 49.8880 82.4583 49.6015 83.1562  c
49.3151 83.8541 48.9479 84.3619 48.5000 84.6796  c
48.0520 84.9974 47.6250 85.1562 47.2187 85.1562  c
46.3958 85.1562 45.7083 84.6718 45.1562 83.7031  c
44.6979 82.8802 44.4687 81.8958 44.4687 80.7500  c
h
45.7187 80.9062 m
45.7187 82.0937 45.8645 83.0625 46.1562 83.8125  c
46.3958 84.4375 46.7552 84.7500 47.2343 84.7500  c
47.4635 84.7500 47.7005 84.6484 47.9453 84.4453  c
48.1901 84.2421 48.3750 83.8958 48.5000 83.4062  c
48.6979 82.6875 48.7968 81.6614 48.7968 80.3281  c
48.7968 79.3489 48.6927 78.5312 48.4843 77.8750  c
48.3385 77.3854 48.1406 77.0416 47.8906 76.8437  c
47.7239 76.7083 47.5156 76.6406 47.2656 76.6406  c
46.9843 76.6406 46.7291 76.7656 46.5000 77.0156  c
46.1979 77.3697 45.9921 77.9244 45.8828 78.6796  c
45.7734 79.4349 45.7187 80.1770 45.7187 80.9062  c
h
52.1250 83.7656 m
52.3229 83.7656 52.4895 83.8359 52.6250 83.9765  c
52.7604 84.1171 52.8281 84.2812 52.8281 84.4687  c
52.8281 84.6666 52.7604 84.8333 52.6250 84.9687  c
52.4895 85.1041 52.3229 85.1718 52.1250 85.1718  c
51.9270 85.1718 51.7604 85.1041 51.6250 84.9687  c
51.4895 84.8333 51.4218 84.6666 51.4218 84.4687  c
51.4218 84.2708 51.4895 84.1041 51.6250 83.9687  c
51.7604 83.8333 51.9270 83.7656 52.1250 83.7656  c
h
59.7031 83.3437 m
59.1093 85.0000 l
54.0312 85.0000 l
54.0312 84.7656 l
55.5208 83.4010 56.5703 82.2864 57.1796 81.4218  c
57.7890 80.5572 58.0937 79.7708 58.0937 79.0625  c
58.0937 78.5104 57.9270 78.0599 57.5937 77.7109  c
57.2604 77.3619 56.8593 77.1875 56.3906 77.1875  c
55.9739 77.1875 55.5963 77.3099 55.2578 77.5546  c
54.9192 77.7994 54.6718 78.1614 54.5156 78.6406  c
54.2812 78.6406 l
54.3854 77.8593 54.6562 77.2604 55.0937 76.8437  c
55.5312 76.4270 56.0781 76.2187 56.7343 76.2187  c
57.4322 76.2187 58.0156 76.4427 58.4843 76.8906  c
58.9531 77.3385 59.1875 77.8645 59.1875 78.4687  c
59.1875 78.9062 59.0833 79.3437 58.8750 79.7812  c
58.5625 80.4687 58.0572 81.1927 57.3593 81.9531  c
56.3072 83.1093 55.6458 83.8072 55.3750 84.0468  c
57.6250 84.0468 l
58.0833 84.0468 58.4036 84.0286 58.5859 83.9921  c
58.7682 83.9557 58.9349 83.8854 59.0859 83.7812  c
59.2369 83.6770 59.3645 83.5312 59.4687 83.3437  c
59.7031 83.3437 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
62.0000 52.8717 m
57.2550 52.8717 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
44.4687 57.7500 m
44.4687 56.7708 44.6171 55.9244 44.9140 55.2109  c
45.2109 54.4974 45.6041 53.9687 46.0937 53.6250  c
46.4791 53.3541 46.8750 53.2187 47.2812 53.2187  c
47.9375 53.2187 48.5260 53.5520 49.0468 54.2187  c
49.7031 55.0520 50.0312 56.1822 50.0312 57.6093  c
50.0312 58.6093 49.8880 59.4583 49.6015 60.1562  c
49.3151 60.8541 48.9479 61.3619 48.5000 61.6796  c
48.0520 61.9974 47.6250 62.1562 47.2187 62.1562  c
46.3958 62.1562 45.7083 61.6718 45.1562 60.7031  c
44.6979 59.8802 44.4687 58.8958 44.4687 57.7500  c
h
45.7187 57.9062 m
45.7187 59.0937 45.8645 60.0625 46.1562 60.8125  c
46.3958 61.4375 46.7552 61.7500 47.2343 61.7500  c
47.4635 61.7500 47.7005 61.6484 47.9453 61.4453  c
48.1901 61.2421 48.3750 60.8958 48.5000 60.4062  c
48.6979 59.6875 48.7968 58.6614 48.7968 57.3281  c
48.7968 56.3489 48.6927 55.5312 48.4843 54.8750  c
48.3385 54.3854 48.1406 54.0416 47.8906 53.8437  c
47.7239 53.7083 47.5156 53.6406 47.2656 53.6406  c
46.9843 53.6406 46.7291 53.7656 46.5000 54.0156  c
46.1979 54.3697 45.9921 54.9244 45.8828 55.6796  c
45.7734 56.4349 45.7187 57.1770 45.7187 57.9062  c
h
52.1250 60.7656 m
52.3229 60.7656 52.4895 60.8359 52.6250 60.9765  c
52.7604 61.1171 52.8281 61.2812 52.8281 61.4687  c
52.8281 61.6666 52.7604 61.8333 52.6250 61.9687  c
52.4895 62.1041 52.3229 62.1718 52.1250 62.1718  c
51.9270 62.1718 51.7604 62.1041 51.6250 61.9687  c
51.4895 61.8333 51.4218 61.6666 51.4218 61.4687  c
51.4218 61.2708 51.4895 61.1041 51.6250 60.9687  c
51.7604 60.8333 51.9270 60.7656 52.1250 60.7656  c
h
54.4062 55.0312 m
54.6562 54.4479 54.9687 54.0000 55.3437 53.6875  c
55.7187 53.3750 56.1822 53.2187 56.7343 53.2187  c
57.4322 53.2187 57.9635 53.4427 58.3281 53.8906  c
58.6093 54.2239 58.7500 54.5781 58.7500 54.9531  c
58.7500 55.5885 58.3541 56.2395 57.5625 56.9062  c
58.0937 57.1145 58.4947 57.4114 58.7656 57.7968  c
59.0364 58.1822 59.1718 58.6354 59.1718 59.1562  c
59.1718 59.8958 58.9322 60.5364 58.4531 61.0781  c
57.8385 61.7968 56.9479 62.1562 55.7812 62.1562  c
55.1979 62.1562 54.8020 62.0833 54.5937 61.9375  c
54.3854 61.7916 54.2812 61.6354 54.2812 61.4687  c
54.2812 61.3437 54.3307 61.2369 54.4296 61.1484  c
54.5286 61.0599 54.6458 61.0156 54.7812 61.0156  c
54.8854 61.0156 54.9947 61.0312 55.1093 61.0625  c
55.1822 61.0833 55.3463 61.1588 55.6015 61.2890  c
55.8567 61.4192 56.0312 61.5000 56.1250 61.5312  c
56.2812 61.5729 56.4479 61.5937 56.6250 61.5937  c
57.0520 61.5937 57.4270 61.4270 57.7500 61.0937  c
58.0729 60.7604 58.2343 60.3645 58.2343 59.9062  c
58.2343 59.5729 58.1614 59.2500 58.0156 58.9375  c
57.9010 58.6979 57.7760 58.5156 57.6406 58.3906  c
57.4635 58.2239 57.2161 58.0729 56.8984 57.9375  c
56.5807 57.8020 56.2552 57.7343 55.9218 57.7343  c
55.7187 57.7343 l
55.7187 57.5312 l
56.0520 57.4895 56.3880 57.3697 56.7265 57.1718  c
57.0651 56.9739 57.3099 56.7369 57.4609 56.4609  c
57.6119 56.1849 57.6875 55.8750 57.6875 55.5312  c
57.6875 55.1041 57.5520 54.7552 57.2812 54.4843  c
57.0104 54.2135 56.6718 54.0781 56.2656 54.0781  c
55.6093 54.0781 55.0625 54.4270 54.6250 55.1250  c
54.4062 55.0312 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
62.0000 30.4496 m
57.2550 30.4496 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
44.4687 35.7500 m
44.4687 34.7708 44.6171 33.9244 44.9140 33.2109  c
45.2109 32.4974 45.6041 31.9687 46.0937 31.6250  c
46.4791 31.3541 46.8750 31.2187 47.2812 31.2187  c
47.9375 31.2187 48.5260 31.5520 49.0468 32.2187  c
49.7031 33.0520 50.0312 34.1822 50.0312 35.6093  c
50.0312 36.6093 49.8880 37.4583 49.6015 38.1562  c
49.3151 38.8541 48.9479 39.3619 48.5000 39.6796  c
48.0520 39.9974 47.6250 40.1562 47.2187 40.1562  c
46.3958 40.1562 45.7083 39.6718 45.1562 38.7031  c
44.6979 37.8802 44.4687 36.8958 44.4687 35.7500  c
h
45.7187 35.9062 m
45.7187 37.0937 45.8645 38.0625 46.1562 38.8125  c
46.3958 39.4375 46.7552 39.7500 47.2343 39.7500  c
47.4635 39.7500 47.7005 39.6484 47.9453 39.4453  c
48.1901 39.2421 48.3750 38.8958 48.5000 38.4062  c
48.6979 37.6875 48.7968 36.6614 48.7968 35.3281  c
48.7968 34.3489 48.6927 33.5312 48.4843 32.8750  c
48.3385 32.3854 48.1406 32.0416 47.8906 31.8437  c
47.7239 31.7083 47.5156 31.6406 47.2656 31.6406  c
46.9843 31.6406 46.7291 31.7656 46.5000 32.0156  c
46.1979 32.3697 45.9921 32.9244 45.8828 33.6796  c
45.7734 34.4349 45.7187 35.1770 45.7187 35.9062  c
h
52.1250 38.7656 m
52.3229 38.7656 52.4895 38.8359 52.6250 38.9765  c
52.7604 39.1171 52.8281 39.2812 52.8281 39.4687  c
52.8281 39.6666 52.7604 39.8333 52.6250 39.9687  c
52.4895 40.1041 52.3229 40.1718 52.1250 40.1718  c
51.9270 40.1718 51.7604 40.1041 51.6250 39.9687  c
51.4895 39.8333 51.4218 39.6666 51.4218 39.4687  c
51.4218 39.2708 51.4895 39.1041 51.6250 38.9687  c
51.7604 38.8333 51.9270 38.7656 52.1250 38.7656  c
h
59.7968 36.8281 m
59.7968 37.7343 l
58.6406 37.7343 l
58.6406 40.0000 l
57.5937 40.0000 l
57.5937 37.7343 l
53.9531 37.7343 l
53.9531 36.9218 l
57.9531 31.2187 l
58.6406 31.2187 l
58.6406 36.8281 l
59.7968 36.8281 l
h
57.5937 36.8281 m
57.5937 32.5468 l
54.5781 36.8281 l
57.5937 36.8281 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
62.0000 8.02761 m
57.2550 8.02761 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
44.4687 13.7500 m
44.4687 12.7708 44.6171 11.9244 44.9140 11.2109  c
45.2109 10.4974 45.6041 9.96875 46.0937 9.62500  c
46.4791 9.35416 46.8750 9.21875 47.2812 9.21875  c
47.9375 9.21875 48.5260 9.55208 49.0468 10.2187  c
49.7031 11.0520 50.0312 12.1822 50.0312 13.6093  c
50.0312 14.6093 49.8880 15.4583 49.6015 16.1562  c
49.3151 16.8541 48.9479 17.3619 48.5000 17.6796  c
48.0520 17.9974 47.6250 18.1562 47.2187 18.1562  c
46.3958 18.1562 45.7083 17.6718 45.1562 16.7031  c
44.6979 15.8802 44.4687 14.8958 44.4687 13.7500  c
h
45.7187 13.9062 m
45.7187 15.0937 45.8645 16.0625 46.1562 16.8125  c
46.3958 17.4375 46.7552 17.7500 47.2343 17.7500  c
47.4635 17.7500 47.7005 17.6484 47.9453 17.4453  c
48.1901 17.2421 48.3750 16.8958 48.5000 16.4062  c
48.6979 15.6875 48.7968 14.6614 48.7968 13.3281  c
48.7968 12.3489 48.6927 11.5312 48.4843 10.8750  c
48.3385 10.3854 48.1406 10.0416 47.8906 9.84375  c
47.7239 9.70833 47.5156 9.64062 47.2656 9.64062  c
46.9843 9.64062 46.7291 9.76562 46.5000 10.0156  c
46.1979 10.3697 45.9921 10.9244 45.8828 11.6796  c
45.7734 12.4349 45.7187 13.1770 45.7187 13.9062  c
h
52.1250 16.7656 m
52.3229 16.7656 52.4895 16.8359 52.6250 16.9765  c
52.7604 17.1171 52.8281 17.2812 52.8281 17.4687  c
52.8281 17.6666 52.7604 17.8333 52.6250 17.9687  c
52.4895 18.1041 52.3229 18.1718 52.1250 18.1718  c
51.9270 18.1718 51.7604 18.1041 51.6250 17.9687  c
51.4895 17.8333 51.4218 17.6666 51.4218 17.4687  c
51.4218 17.2708 51.4895 17.1041 51.6250 16.9687  c
51.7604 16.8333 51.9270 16.7656 52.1250 16.7656  c
h
59.3906 9.39062 m
58.8906 10.4687 l
56.3125 10.4687 l
55.7500 11.6250 l
56.8645 11.7916 57.7500 12.2083 58.4062 12.8750  c
58.9687 13.4479 59.2500 14.1250 59.2500 14.9062  c
59.2500 15.3645 59.1588 15.7864 58.9765 16.1718  c
58.7942 16.5572 58.5625 16.8854 58.2812 17.1562  c
58.0000 17.4270 57.6875 17.6406 57.3437 17.7968  c
56.8645 18.0364 56.3645 18.1562 55.8437 18.1562  c
55.3333 18.1562 54.9609 18.0677 54.7265 17.8906  c
54.4921 17.7135 54.3750 17.5208 54.3750 17.3125  c
54.3750 17.1875 54.4244 17.0807 54.5234 16.9921  c
54.6224 16.9036 54.7447 16.8593 54.8906 16.8593  c
54.9947 16.8593 55.0885 16.8750 55.1718 16.9062  c
55.2552 16.9375 55.3958 17.0260 55.5937 17.1718  c
55.9166 17.3906 56.2395 17.5000 56.5625 17.5000  c
57.0625 17.5000 57.4974 17.3125 57.8671 16.9375  c
58.2369 16.5625 58.4218 16.1041 58.4218 15.5625  c
58.4218 15.0416 58.2552 14.5572 57.9218 14.1093  c
57.5885 13.6614 57.1302 13.3125 56.5468 13.0625  c
56.0781 12.8750 55.4479 12.7656 54.6562 12.7343  c
56.3125 9.39062 l
59.3906 9.39062 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 550 159 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
